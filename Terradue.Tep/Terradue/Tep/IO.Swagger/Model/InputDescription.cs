/* 
 * The OGC API - Processes
 *
 * WARNING - THIS IS WORK IN PROGRESS
 *
 * OpenAPI spec version: 1.0-draft.5
 * Contact: b.pross@52north.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InputDescription
    /// </summary>
    [DataContract]
        public partial class InputDescription : DataDescriptionType,  IEquatable<InputDescription>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputDescription" /> class.
        /// </summary>
        /// <param name="input">input.</param>
        /// <param name="minOccurs">minOccurs.</param>
        /// <param name="maxOccurs">maxOccurs.</param>
        public InputDescription(Input input,
                                int? minOccurs,
                                int? maxOccurs) : base(input.Id, null, null, null, null, null)
        {
            this.Input = input;
            this.MinOccurs = minOccurs;
            this.MaxOccurs = maxOccurs;
        }
        
        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name="input", EmitDefaultValue=false)]
        public Input Input { get; set; }

        /// <summary>
        /// Gets or Sets MinOccurs
        /// </summary>
        [DataMember(Name="minOccurs", EmitDefaultValue=false)]
        public int? MinOccurs { get; set; }

        /// <summary>
        /// Gets or Sets MaxOccurs
        /// </summary>
        [DataMember(Name="maxOccurs", EmitDefaultValue=false)]
        public int? MaxOccurs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputDescription {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  MinOccurs: ").Append(MinOccurs).Append("\n");
            sb.Append("  MaxOccurs: ").Append(MaxOccurs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputDescription);
        }

        /// <summary>
        /// Returns true if InputDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of InputDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputDescription input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && base.Equals(input) && 
                (
                    this.MinOccurs == input.MinOccurs ||
                    (this.MinOccurs != null &&
                    this.MinOccurs.Equals(input.MinOccurs))
                ) && base.Equals(input) && 
                (
                    this.MaxOccurs == input.MaxOccurs ||
                    (this.MaxOccurs != null &&
                    this.MaxOccurs.Equals(input.MaxOccurs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.MinOccurs != null)
                    hashCode = hashCode * 59 + this.MinOccurs.GetHashCode();
                if (this.MaxOccurs != null)
                    hashCode = hashCode * 59 + this.MaxOccurs.GetHashCode();
                return hashCode;
            }
        }
    }
}
