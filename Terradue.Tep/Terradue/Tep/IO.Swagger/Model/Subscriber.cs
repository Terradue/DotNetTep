/* 
 * The OGC API - Processes
 *
 * WARNING - THIS IS WORK IN PROGRESS
 *
 * OpenAPI spec version: 1.0-draft.5
 * Contact: b.pross@52north.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Optional URIs for callbacks for this job.  Support for this parameter is not required and the parameter may be removed from the API definition, if conformance class **&#x27;callback&#x27;** is not listed in the conformance declaration under &#x60;/conformance&#x60;.
    /// </summary>
    [DataContract]
        public partial class Subscriber :  IEquatable<Subscriber>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscriber" /> class.
        /// </summary>
        /// <param name="successUri">successUri.</param>
        /// <param name="inProgressUri">inProgressUri.</param>
        /// <param name="failedUri">failedUri.</param>
        public Subscriber(string successUri = default(string), string inProgressUri = default(string), string failedUri = default(string))
        {
            this.SuccessUri = successUri;
            this.InProgressUri = inProgressUri;
            this.FailedUri = failedUri;
        }
        
        /// <summary>
        /// Gets or Sets SuccessUri
        /// </summary>
        [DataMember(Name="successUri", EmitDefaultValue=false)]
        public string SuccessUri { get; set; }

        /// <summary>
        /// Gets or Sets InProgressUri
        /// </summary>
        [DataMember(Name="inProgressUri", EmitDefaultValue=false)]
        public string InProgressUri { get; set; }

        /// <summary>
        /// Gets or Sets FailedUri
        /// </summary>
        [DataMember(Name="failedUri", EmitDefaultValue=false)]
        public string FailedUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Subscriber {\n");
            sb.Append("  SuccessUri: ").Append(SuccessUri).Append("\n");
            sb.Append("  InProgressUri: ").Append(InProgressUri).Append("\n");
            sb.Append("  FailedUri: ").Append(FailedUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Subscriber);
        }

        /// <summary>
        /// Returns true if Subscriber instances are equal
        /// </summary>
        /// <param name="input">Instance of Subscriber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscriber input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SuccessUri == input.SuccessUri ||
                    (this.SuccessUri != null &&
                    this.SuccessUri.Equals(input.SuccessUri))
                ) && 
                (
                    this.InProgressUri == input.InProgressUri ||
                    (this.InProgressUri != null &&
                    this.InProgressUri.Equals(input.InProgressUri))
                ) && 
                (
                    this.FailedUri == input.FailedUri ||
                    (this.FailedUri != null &&
                    this.FailedUri.Equals(input.FailedUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SuccessUri != null)
                    hashCode = hashCode * 59 + this.SuccessUri.GetHashCode();
                if (this.InProgressUri != null)
                    hashCode = hashCode * 59 + this.InProgressUri.GetHashCode();
                if (this.FailedUri != null)
                    hashCode = hashCode * 59 + this.FailedUri.GetHashCode();
                return hashCode;
            }
        }
    }
}
