/* 
 * The OGC API - Processes
 *
 * WARNING - THIS IS WORK IN PROGRESS
 *
 * OpenAPI spec version: 1.0-draft.5
 * Contact: b.pross@52north.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DescriptionType
    /// </summary>
    [DataContract]
    public partial class DescriptionType : IEquatable<DescriptionType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DescriptionType" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="title">title.</param>
        /// <param name="description">description.</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="additionalParameters">additionalParameters.</param>
        public DescriptionType(string id,
                               string title,
                               string description,
                               List<string> keywords,
                               List<Metadata> metadata,
                               AllOfdescriptionTypeAdditionalParameters additionalParameters)
        {
            // to ensure "id" is required (not null)
            //if (id == null)
            //{
            //    throw new InvalidDataException("id is a required property for DescriptionType and cannot be null");
            //}
            //else
            //{
            //    this.Id = id;
            //}
            this.Id = id;
            this.Title = title;
            this.Description = description;
            this.Keywords = keywords;
            this.Metadata = metadata;
            this.AdditionalParameters = additionalParameters;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name = "keywords", EmitDefaultValue = false)]
        public List<string> Keywords { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public List<Metadata> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalParameters
        /// </summary>
        [DataMember(Name = "additionalParameters", EmitDefaultValue = false)]
        public AllOfdescriptionTypeAdditionalParameters AdditionalParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DescriptionType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  AdditionalParameters: ").Append(AdditionalParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DescriptionType);
        }

        /// <summary>
        /// Returns true if DescriptionType instances are equal
        /// </summary>
        /// <param name="input">Instance of DescriptionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DescriptionType input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) &&
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) &&
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) &&
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    input.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                ) &&
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) &&
                (
                    this.AdditionalParameters == input.AdditionalParameters ||
                    (this.AdditionalParameters != null &&
                    this.AdditionalParameters.Equals(input.AdditionalParameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.AdditionalParameters != null)
                    hashCode = hashCode * 59 + this.AdditionalParameters.GetHashCode();
                return hashCode;
            }
        }
    }
}
