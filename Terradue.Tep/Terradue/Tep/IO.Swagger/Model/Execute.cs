/* 
 * The OGC API - Processes
 *
 * WARNING - THIS IS WORK IN PROGRESS
 *
 * OpenAPI spec version: 1.0-draft.5
 * Contact: b.pross@52north.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Execute
    /// </summary>
    [DataContract]
    public partial class Execute : IEquatable<Execute>
    {
        /// <summary>
        /// Defines Mode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Sync for value: sync
            /// </summary>
            [EnumMember(Value = "sync")]
            Sync = 1,
            /// <summary>
            /// Enum Async for value: async
            /// </summary>
            [EnumMember(Value = "async")]
            Async = 2,
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 3
        }
        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public ModeEnum Mode { get; set; }
        /// <summary>
        /// Defines Response
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResponseEnum
        {
            /// <summary>
            /// Enum Raw for value: raw
            /// </summary>
            [EnumMember(Value = "raw")]
            Raw = 1,
            /// <summary>
            /// Enum Document for value: document
            /// </summary>
            [EnumMember(Value = "document")]
            Document = 2
        }
        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [DataMember(Name = "response", EmitDefaultValue = false)]
        public ResponseEnum Response { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Execute" /> class.
        /// </summary>
        /// <param name="inputs">inputs.</param>
        /// <param name="outputs">outputs (required).</param>
        /// <param name="mode">mode (required).</param>
        /// <param name="response">response (required).</param>
        /// <param name="subscriber">subscriber.</param>
        public Execute(List<Input> inputs,
                       List<Output> outputs,
                       ModeEnum mode,
                       ResponseEnum response,
                       Subscriber subscriber)
        {
            // to ensure "outputs" is required (not null)
            if (outputs == null)
            {
                throw new InvalidDataException("outputs is a required property for Execute and cannot be null");
            }
            else
            {
                this.Outputs = outputs;
            }
            // to ensure "mode" is required (not null)
            if (mode == null)
            {
                throw new InvalidDataException("mode is a required property for Execute and cannot be null");
            }
            else
            {
                this.Mode = mode;
            }
            // to ensure "response" is required (not null)
            if (response == null)
            {
                throw new InvalidDataException("response is a required property for Execute and cannot be null");
            }
            else
            {
                this.Response = response;
            }
            this.Inputs = inputs;
            this.Subscriber = subscriber;
        }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name = "inputs", EmitDefaultValue = false)]
        public List<Input> Inputs { get; set; }

        /// <summary>
        /// Gets or Sets Outputs
        /// </summary>
        [DataMember(Name = "outputs", EmitDefaultValue = false)]
        public List<Output> Outputs { get; set; }



        /// <summary>
        /// Gets or Sets Subscriber
        /// </summary>
        [DataMember(Name = "subscriber", EmitDefaultValue = false)]
        public Subscriber Subscriber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Execute {\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Subscriber: ").Append(Subscriber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Execute);
        }

        /// <summary>
        /// Returns true if Execute instances are equal
        /// </summary>
        /// <param name="input">Instance of Execute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Execute input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) &&
                (
                    this.Outputs == input.Outputs ||
                    this.Outputs != null &&
                    input.Outputs != null &&
                    this.Outputs.SequenceEqual(input.Outputs)
                ) &&
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) &&
                (
                    this.Response == input.Response ||
                    (this.Response != null &&
                    this.Response.Equals(input.Response))
                ) &&
                (
                    this.Subscriber == input.Subscriber ||
                    (this.Subscriber != null &&
                    this.Subscriber.Equals(input.Subscriber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.Outputs != null)
                    hashCode = hashCode * 59 + this.Outputs.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Response != null)
                    hashCode = hashCode * 59 + this.Response.GetHashCode();
                if (this.Subscriber != null)
                    hashCode = hashCode * 59 + this.Subscriber.GetHashCode();
                return hashCode;
            }
        }
    }
}
