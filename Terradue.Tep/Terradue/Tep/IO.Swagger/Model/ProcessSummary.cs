/* 
 * The OGC API - Processes
 *
 * WARNING - THIS IS WORK IN PROGRESS
 *
 * OpenAPI spec version: 1.0-draft.5
 * Contact: b.pross@52north.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProcessSummary
    /// </summary>
    [DataContract]
        public partial class ProcessSummary : DescriptionType,  IEquatable<ProcessSummary>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessSummary" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="version">version (required).</param>
        /// <param name="jobControlOptions">jobControlOptions.</param>
        /// <param name="outputTransmission">outputTransmission.</param>
        /// <param name="links">links.</param>
        public ProcessSummary(string id,
                              string version,
                              List<JobControlOptions> jobControlOptions,
                              List<TransmissionMode> outputTransmission,
                              List<Link> links,
                              string title,
                              string description,
                              List<string> keywords,
                              List<Metadata> metadata,
                              AllOfdescriptionTypeAdditionalParameters additionalParameters) 
                              : base(id, title, description, keywords, metadata, additionalParameters)
        {
            // to ensure "id" is required (not null)
            //if (id == null)
            //{
            //    throw new InvalidDataException("id is a required property for ProcessSummary and cannot be null");
            //}
            //else
            //{
            //    this.Id = id;
            //}
            // to ensure "version" is required (not null)
            // TODO https://projects.terradue.com/browse/ESAEOEPCA-54
            // if (version == null)
            // {
            //     throw new InvalidDataException("version is a required property for ProcessSummary and cannot be null");
            // }
            // else
            // {
            //     this.Version = version;
            // }
            this.Id = id;
            this.Version = version;
            this.JobControlOptions = jobControlOptions;
            this.OutputTransmission = outputTransmission;
            this.Links = links;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets JobControlOptions
        /// </summary>
        [DataMember(Name="jobControlOptions", EmitDefaultValue=false)]
        public List<JobControlOptions> JobControlOptions { get; set; }

        /// <summary>
        /// Gets or Sets OutputTransmission
        /// </summary>
        [DataMember(Name="outputTransmission", EmitDefaultValue=false)]
        public List<TransmissionMode> OutputTransmission { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessSummary {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  JobControlOptions: ").Append(JobControlOptions).Append("\n");
            sb.Append("  OutputTransmission: ").Append(OutputTransmission).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessSummary);
        }

        /// <summary>
        /// Returns true if ProcessSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessSummary input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && base.Equals(input) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && base.Equals(input) && 
                (
                    this.JobControlOptions == input.JobControlOptions ||
                    this.JobControlOptions != null &&
                    input.JobControlOptions != null &&
                    this.JobControlOptions.SequenceEqual(input.JobControlOptions)
                ) && base.Equals(input) && 
                (
                    this.OutputTransmission == input.OutputTransmission ||
                    this.OutputTransmission != null &&
                    input.OutputTransmission != null &&
                    this.OutputTransmission.SequenceEqual(input.OutputTransmission)
                ) && base.Equals(input) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.JobControlOptions != null)
                    hashCode = hashCode * 59 + this.JobControlOptions.GetHashCode();
                if (this.OutputTransmission != null)
                    hashCode = hashCode * 59 + this.OutputTransmission.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }
    }
}
