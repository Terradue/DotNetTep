/* 
 * The OGC API - Processes
 *
 * WARNING - THIS IS WORK IN PROGRESS
 *
 * OpenAPI spec version: 1.0-draft.5
 * Contact: b.pross@52north.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BoundingBoxDataType
    /// </summary>
    [DataContract]
    public partial class BoundingBoxDataType : IEquatable<BoundingBoxDataType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoundingBoxDataType" /> class.
        /// </summary>
        /// <param name="supportedCRS">supportedCRS (required).</param>
        public BoundingBoxDataType(List<SupportedCRS> supportedCRS)
        {
            // to ensure "supportedCRS" is required (not null)
            if (supportedCRS == null)
            {
                throw new InvalidDataException("supportedCRS is a required property for BoundingBoxDataType and cannot be null");
            }
            else
            {
                this.SupportedCRS = supportedCRS;
            }
        }

        /// <summary>
        /// Gets or Sets SupportedCRS
        /// </summary>
        [DataMember(Name = "supportedCRS", EmitDefaultValue = false)]
        public List<SupportedCRS> SupportedCRS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoundingBoxDataType {\n");
            sb.Append("  SupportedCRS: ").Append(SupportedCRS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoundingBoxDataType);
        }

        /// <summary>
        /// Returns true if BoundingBoxDataType instances are equal
        /// </summary>
        /// <param name="input">Instance of BoundingBoxDataType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoundingBoxDataType input)
        {
            if (input == null)
                return false;

            return
                (
                    this.SupportedCRS == input.SupportedCRS ||
                    this.SupportedCRS != null &&
                    input.SupportedCRS != null &&
                    this.SupportedCRS.SequenceEqual(input.SupportedCRS)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SupportedCRS != null)
                    hashCode = hashCode * 59 + this.SupportedCRS.GetHashCode();
                return hashCode;
            }
        }
    }
}
