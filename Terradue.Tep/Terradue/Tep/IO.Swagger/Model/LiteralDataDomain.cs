/* 
 * The OGC API - Processes
 *
 * WARNING - THIS IS WORK IN PROGRESS
 *
 * OpenAPI spec version: 1.0-draft.5
 * Contact: b.pross@52north.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LiteralDataDomain
    /// </summary>
    [DataContract]
    public partial class LiteralDataDomain : IEquatable<LiteralDataDomain>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiteralDataDomain" /> class.
        /// </summary>
        /// <param name="valueDefinition">valueDefinition.</param>
        /// <param name="defaultValue">defaultValue.</param>
        /// <param name="dataType">dataType.</param>
        /// <param name="uom">uom.</param>
        public LiteralDataDomain(OneOfliteralDataDomainValueDefinition valueDefinition = default(OneOfliteralDataDomainValueDefinition), string defaultValue = default(string), NameReferenceType dataType = default(NameReferenceType), NameReferenceType uom = default(NameReferenceType))
        {
            this.ValueDefinition = valueDefinition;
            this.DefaultValue = defaultValue;
            this.DataType = dataType;
            this.Uom = uom;
        }

        /// <summary>
        /// Gets or Sets ValueDefinition
        /// </summary>
        [DataMember(Name = "valueDefinition", EmitDefaultValue = false)]
        public OneOfliteralDataDomainValueDefinition ValueDefinition { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name = "defaultValue", EmitDefaultValue = false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name = "dataType", EmitDefaultValue = false)]
        public NameReferenceType DataType { get; set; }

        /// <summary>
        /// Gets or Sets Uom
        /// </summary>
        [DataMember(Name = "uom", EmitDefaultValue = false)]
        public NameReferenceType Uom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LiteralDataDomain {\n");
            sb.Append("  ValueDefinition: ").Append(ValueDefinition).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Uom: ").Append(Uom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LiteralDataDomain);
        }

        /// <summary>
        /// Returns true if LiteralDataDomain instances are equal
        /// </summary>
        /// <param name="input">Instance of LiteralDataDomain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiteralDataDomain input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ValueDefinition == input.ValueDefinition ||
                    (this.ValueDefinition != null &&
                    this.ValueDefinition.Equals(input.ValueDefinition))
                ) &&
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) &&
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) &&
                (
                    this.Uom == input.Uom ||
                    (this.Uom != null &&
                    this.Uom.Equals(input.Uom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ValueDefinition != null)
                    hashCode = hashCode * 59 + this.ValueDefinition.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.Uom != null)
                    hashCode = hashCode * 59 + this.Uom.GetHashCode();
                return hashCode;
            }
        }
    }
}
