/* 
 * The OGC API - Processes
 *
 * WARNING - THIS IS WORK IN PROGRESS
 *
 * OpenAPI spec version: 1.0-draft.5
 * Contact: b.pross@52north.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LiteralDataType
    /// </summary>
    [DataContract]
        public partial class LiteralDataType :  IEquatable<LiteralDataType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiteralDataType" /> class.
        /// </summary>
        /// <param name="literalDataDomains">literalDataDomains (required).</param>
        public LiteralDataType(List<LiteralDataDomain> literalDataDomains = default(List<LiteralDataDomain>))
        {
            // to ensure "literalDataDomains" is required (not null)
            if (literalDataDomains == null)
            {
                throw new InvalidDataException("literalDataDomains is a required property for LiteralDataType and cannot be null");
            }
            else
            {
                this.LiteralDataDomains = literalDataDomains;
            }
        }
        
        /// <summary>
        /// Gets or Sets LiteralDataDomains
        /// </summary>
        [DataMember(Name="literalDataDomains", EmitDefaultValue=false)]
        public List<LiteralDataDomain> LiteralDataDomains { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LiteralDataType {\n");
            sb.Append("  LiteralDataDomains: ").Append(LiteralDataDomains).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LiteralDataType);
        }

        /// <summary>
        /// Returns true if LiteralDataType instances are equal
        /// </summary>
        /// <param name="input">Instance of LiteralDataType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiteralDataType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LiteralDataDomains == input.LiteralDataDomains ||
                    this.LiteralDataDomains != null &&
                    input.LiteralDataDomains != null &&
                    this.LiteralDataDomains.SequenceEqual(input.LiteralDataDomains)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LiteralDataDomains != null)
                    hashCode = hashCode * 59 + this.LiteralDataDomains.GetHashCode();
                return hashCode;
            }
        }
    }
}
